name: Software templates end to end tests 

on:
  push


jobs:
  run-e2e:
    env: 
      GITHUB_TOKEN: ${{ github.TOKEN }}
    runs-on: ubuntu-24.04
    steps:
    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: kind

    - name: Install Operators Support
      run: |
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
          # give the apiserver time
          sleep 5s
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml

    - name: Deploy ArgoCD
      run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: Deploy Orchestrator 
      run: |
          helm repo add orchestrator https://rhdhorchestrator.github.io/orchestrator-helm-chart
          helm install orchestrator orchestrator/orchestrator-k8s --set platform.eventing.broker.name="" 

          kubectl get sfp -A
          kubectl wait --for=condition=Ready=true pods -l "app.kubernetes.io/name=backstage" --timeout=10m
          kubectl get pods -o wide
          kubectl wait --for=condition=Ready=true pods -l "app=sonataflow-platform" --timeout=180s

    - name: Set config and gather Secrets
      run: |
        echo "Proxy Janus-idp port ⏳"
        kubectl port-forward "$(kubectl get svc -l app.kubernetes.io/name=backstage -o name)" 9080:7007 &
        port_forward_pid="$!"
        sleep 3
        echo "Proxy Janus-idp port ✅"
        
        BACKEND_TOKEN=$(kubectl get secret -n default orchestrator-auth -o jsonpath={.data.backend-secret} | base64 -d)
        echo "BACKEND_TOKEN=$BACKEND_TOKEN" >> $GITHUB_ENV
        echo "BACKSTAGE_URL=http://localhost:9080" >> $GITHUB_ENV
        PSQL_SECRET=$(kubectl get secret -n default orchestrator-postgresql -o jsonpath={.data.password} | base64 -d)
        echo "PSQL_SECRET=$PSQL_SECRET" >> $GITHUB_ENV


        kubectl get cm orchestrator-backstage-app-config -n default -oyaml > save.yaml
        cat save.yaml
        sed '/locations:/a\      - target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/basic-workflow/template.yaml\n        type: url\n      - target: https://github.com/rhdhorchestrator/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/advanced-workflow/template.yaml\n        type: url' save.yaml
        sed -i 's/INSERT VALID TOKEN HERE/$GITHUB_TOKEN/g' save.yaml
        kubectl apply -f save.yaml
        kubectl rollout restart deployment orchestrator-backstage -n default

        
    - name: Run Basic Template
      run: | 
        TASK_ID=$(curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" -H "Authorization: Bearer $BACKEND_TOKEN" -H "Content-Type: application/json" -d '{"templateRef":"template:default/basic-workflow-bootstrap","createdBy":"user:guest","values":{"owner":"user:guest","orgName":"test-workflows","repoName":"test-repo","description":"This is a Test Repository","workflowId":"test","CI":"tekton_argocd","argocdNamespace":"argocd","infrastructureWorkflowId":"test","namespace":"sonataflow-operator-system","persistencePSQLDatabaseName":"sonataflow","persistencePSQLPasswordKey":"$PSQL_SECRET","persistencePSQLSecretName":"sonataflow-psql-postgresql","persistencePSQLServiceName":"orchestrator-postgresql","persistencePSQLServiceNamespace":"default","persistencePSQLServicePort":5432,"persistencePSQLUserKey":"$PSQL_SECRET","workflowType":"infrastructure", "quayConfig":"Use Existing Repository","quayOrgName":"testing-eshalev","quayRepoName":"cray","system":"Guest"}}' | jq .id | tr -d '"')
        
        echo "TASK ID is $TASK_ID"
        echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
    
    - name: Validate Basic Template Successs
      run: | 
        sleep 20
        RESULT=$(curl -X GET "$BACKSTAGE_URL/api/scaffolder/v2/tasks/$TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status | tr -d '"')
        if [ "$RESULT" = "failed" ]; then 
          echo "The Basic template launched but failed to complete."
          exit 1
        fi

        if [ "$RESULT" = "success" ]; then 
          echo "The Basic template was executed successfully."
        fi


    - name: Run Advanced Template
      run: | 
        # curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" -H "Authorization: Bearer $BACKEND_TOKEN" -H "Content-Type: application/json" -d '{"templateRef":"template:default/advanced-workflow-bootstrap","values":{"owner":"user:guest","orgName":"test-workflows","repoName":"test-repo","description":"This is a Test Repository","workflowId":"test","CI":"tekton_argocd","argocdNamespace":"argocd","infrastructureWorkflowId":"test","namespace":"sonataflow-operator-system","persistencePSQLDatabaseName":"sonataflow","persistencePSQLPasswordKey":"$PSQL_SECRET","persistencePSQLSecretName":"sonataflow-psql-postgresql","persistencePSQLServiceName":"orchestrator-postgresql","persistencePSQLServiceNamespace":"default","persistencePSQLServicePort":5432,"persistencePSQLUserKey":"$PSQL_SECRET","quayConfig":"Use Existing Repository","quayOrgName":"testing-eshalev","quayRepoName":"cray","system":"Guest"}}'
        # echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV
    
    - name: Validate Advanced Template Successs
      run: | 
        # sleep 20
        RESULT=$(curl -X GET "$BACKSTAGE_URL/api/scaffolder/v2/tasks/$TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status)
        if [ "$RESULT" = "Error" ]; then 
          exit 1
        fi 
        echo "End to end tests passed ✅"
    
    - name: Cleanup
      run: |
          # Delete Repositories 
          # Delete RHDH resources created (catalog etc)



        