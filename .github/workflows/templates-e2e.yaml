name: Software templates end to end tests 

on:
    pull_request:
        branches:
            - main

jobs:
  run-e2e:
    runs-on: ubuntu-24.04
    steps:
    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: kind

    - name: Install Operators Support
      run: |
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
          # give the apiserver time
          sleep 5s
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml

    - name: Deploy ArgoCD
      run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: Deploy Tekton
      run: |
          kubectl apply -n tekton-pipelines --filename https://storage.googleapis.com/tekton-releases/pipeline/latest/release.yaml
          kubectl get pods --namespace tekton-pipelines

    - name: Deploy Orchestrator 
      run: |
          helm repo add orchestrator https://parodos-dev.github.io/orchestrator-helm-chart
          helm install orchestrator orchestrator/orchestrator-k8s --set platform.eventing.broker.name="" 

          kubectl get sfp -A
          kubectl wait --for=condition=Ready=true pods -l "app.kubernetes.io/name=backstage" --timeout=10m
          kubectl get pods -o wide
          kubectl wait --for=condition=Ready=true pods -l "app=sonataflow-platform" --timeout=180s

    - name: Gather Secrets
      run: |
        echo "BACKEND_TOKEN=$(kubectl get secrets -n default orchestrator-auth -o json | jq -r '.data | to_entries[] | "\(.key): \(.value | @base64d)"' | awk '{print $2}')" >> $GITHUB_ENV
        echo "BACKSTAGE_URL=http://localhost:9090" >> $GITHUB_ENV
        echo "PSQL_SECRET=$(kubectl get secrets -n default orchestrator-postgresql -o json | jq -r '.data | to_entries[] | "\(.key): \(.value | @base64d)"' | awk '{print $2}')" >> $GITHUB_ENV
        # VALIDATE L49
        
    - name: Run Advanced Template
      run: | 
        TASK_ID=$(curl -X POST "http://localhost:9090/api/scaffolder/v2/tasks" \
        -H "Authorization: Bearer $BEARER" \
        -H "Content-Type: application/json" \
        -d '{
          "templateRef": "template:default/advanced-workflow-bootstrap",
          "createdBy": "user:guest",
          "values": {
            "owner": "user:guest",
            "orgName": "test-workflows",
            "repoName": "test-repo",
            "description": "This is a Test Repository",
            "workflowId": "test",
            "CI": "tekton_argocd",
            "argocdNamespace": "argocd",
            "infrastructureWorkflowId": "test",
            "namespace": "sonataflow-operator-system", 
            "persistencePSQLDatabaseName": "sonataflow",
            "persistencePSQLPasswordKey": "postgres-password",
            "persistencePSQLSecretName": "sonataflow-psql-postgresql",
            "persistencePSQLServiceName": "orchestrator-postgresql",
            "persistencePSQLServiceNamespace": "sonataflow-infra",
            "persistencePSQLServicePort": 5432,
            "persistencePSQLUserKey": "default",
            "quayConfig": "Use Existing Repository",
            "quayOrgName": "testing-eshalev",
            "quayRepoName": "cray",
            "system": "Guest"
          }
        }' | jq .id)
        echo $TASK_ID >> $GITHUB_ENV
    
    - name: Validate Advanced Template Successs
      run: | 
        sleep 45
        curl -X GET "http://localhost:9090/api/scaffolder/v2/tasks/$TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status


    - name: Run Basic Template
      run: | 
        TASK_ID=$(curl -X POST "http://localhost:9090/api/scaffolder/v2/tasks" \
        -H "Authorization: Bearer $BEARER" \
        -H "Content-Type: application/json" \
        -d '{
          "templateRef": "template:default/basic-workflow-bootstrap",
          "createdBy": "user:guest",
          "values": {
            "owner": "user:guest",
            "orgName": "v",
            "repoName": "v",
            "description": "v",
            "workflowId": "v",
            "CI": "tekton_argocd",
            "argocdNamespace": "orchestrator-gitops",
            "infrastructureWorkflowId": "v",
            "namespace": "sonataflow-infra",
            "persistencePSQLDatabaseName": "sonataflow",
            "persistencePSQLPasswordKey": "postgres-password",
            "persistencePSQLSecretName": "sonataflow-psql-postgresql",
            "persistencePSQLServiceName": "sonataflow-psql-postgresql",
            "persistencePSQLServiceNamespace": "sonataflow-infra",
            "persistencePSQLServicePort": 5432,
            "persistencePSQLUserKey": "postgres-username",
            "quayConfig": "Use Existing Repository",
            "quayOrgName": "v",
            "quayRepoName": "v",
            "system": "v"
          }
        }' | jq .id)
        echo $TASK_ID >> $GITHUB_ENV
    
    - name: Validate Basic Template Successs
      run: | 
        sleep 45
        RESULT=$(curl -X GET "http://localhost:9090/api/scaffolder/v2/tasks/$TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status)
        if [ "$RESULT" = "Error" ]; then 
          exit 1
        fi 
        echo "End to end tests passed âœ…"
    
    - name: Cleanup
      run: |
          # Delete Repositories 
          # Delete RHDH resources created (catalog etc)



        