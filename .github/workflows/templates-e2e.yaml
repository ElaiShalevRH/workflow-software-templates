name: Software templates end to end tests 

on:
  push


jobs:
  run-e2e:
    env: 
      GITHUB_TOKEN:  ${{ secrets.TOKEN }}
      GITHUB_ORG: ElaiShalevRH
      QUAY_ORG: testing-eshalev
    runs-on: ubuntu-24.04
    steps:                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: kind

    - name: Install Operators Support
      run: |
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/crds.yaml
          # give the apiserver time
          sleep 5s
          kubectl apply -f https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/master/deploy/upstream/quickstart/olm.yaml

    - name: Deploy ArgoCD
      run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'

    - name: Deploy Orchestrator 
      run: |
          helm repo add orchestrator https://rhdhorchestrator.github.io/orchestrator-helm-chart
          helm install orchestrator orchestrator/orchestrator-k8s --set platform.eventing.broker.name="" 

          kubectl get sfp -A
          kubectl wait --for=condition=Ready=true pods -l "app.kubernetes.io/name=backstage" --timeout=10m
          kubectl get pods -o wide
          kubectl wait --for=condition=Ready=true pods -l "app=sonataflow-platform" --timeout=180s

    - name: Set Secrets and Configurations
      run: |
        
        kubectl get cm orchestrator-backstage-app-config -n default -oyaml > save.yaml
        sed -i "s/INSERT VALID TOKEN HERE/$GITHUB_TOKEN/g" save.yaml
        kubectl apply -f save.yaml
        kubectl rollout restart deployment orchestrator-backstage -n default

        kubectl get sfp -A
        kubectl wait --for=condition=Ready=true pods -l "app.kubernetes.io/name=backstage" --timeout=10m
        kubectl get pods -o wide
        kubectl wait --for=condition=Ready=true pods -l "app=sonataflow-platform" --timeout=180s

        BACKEND_TOKEN=$(kubectl get secret -n default orchestrator-auth -o jsonpath={.data.backend-secret} | base64 -d)
        echo "BACKEND_TOKEN=$BACKEND_TOKEN" >> $GITHUB_ENV
        echo "BACKSTAGE_URL=http://localhost:9080" >> $GITHUB_ENV
        PSQL_SECRET=$(kubectl get secret -n default orchestrator-postgresql -o jsonpath={.data.password} | base64 -d)
        echo "PSQL_SECRET=$PSQL_SECRET" >> $GITHUB_ENV

        echo "Proxy Janus-idp port ⏳"
        kubectl port-forward "$(kubectl get svc -l app.kubernetes.io/name=backstage -o name)" 9080:7007 &
        port_forward_pid="$!"
        sleep 3
        echo "Proxy Janus-idp port ✅"
        
    - name: Register Software Templates
      run: |
        cat > advanced-workflow-payload.json <<EOF
        {
          "type": "url",
          "target": "https://github.com/$GITHUB_ORG/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/advanced-workflow/template.yaml"
        }
        EOF

        curl -X POST "http://localhost:9080/api/catalog/locations" \
        -H "Authorization: Bearer $BACKEND_TOKEN" \
        -H "Content-Type: application/json" \
        --data-binary @advanced-workflow-payload.json

        cat > basic-workflow-payload.json <<EOF
        {
          "type": "url",
          "target": "https://github.com/$GITHUB_ORG/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/basic-workflow/template.yaml"
        }
        EOF

        curl -X POST "http://localhost:9080/api/catalog/locations" \
        -H "Authorization: Bearer $BACKEND_TOKEN" \
        -H "Content-Type: application/json" \
        --data-binary @basic-workflow-payload.json

        # curl -X POST "http://localhost:9080/api/catalog/locations" -H "Authorization: Bearer $BACKEND_TOKEN" -H 'Content-Type: application/json' -d '{"type":"url","target":"https://github.com/$GITHUB_ORG/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/advanced-workflow/template.yaml"}'
        # curl -X POST "http://localhost:9080/api/catalog/locations" -H "Authorization: Bearer $BACKEND_TOKEN" -H 'Content-Type: application/json' -d '{"type":"url","target":"https://github.com/$GITHUB_ORG/workflow-software-templates/blob/main/scaffolder-templates/github-workflows/basic-workflow/template.yaml"}'

    - name: Run Advanced Template
      run: |
        jq -n \
          --arg org "$GITHUB_ORG" \
          --arg repo "advanced-template-test" \
          --arg description "This is a test repository for a workflow created by a template" \
          --arg quayOrg "$QUAY_ORG" \
          --arg psqlSecret "$PSQL_SECRET" \
          '{
            "templateRef": "template:default/advanced-workflow-bootstrap",
            "values": {
              "owner": "user:guest",
              "orgName": $org,
              "repoName": $repo,
              "description": $description,
              "workflowId": "test",
              "CI": "tekton_argocd",
              "argocdNamespace": "argocd",
              "infrastructureWorkflowId": "test",
              "namespace": "sonataflow-operator-system",
              "persistencePSQLDatabaseName": "sonataflow",
              "persistencePSQLPasswordKey": $psqlSecret,
              "persistencePSQLSecretName": "sonataflow-psql-postgresql",
              "persistencePSQLServiceName": "orchestrator-postgresql",
              "persistencePSQLServiceNamespace": "default",
              "persistencePSQLServicePort": 5432,
              "persistencePSQLUserKey": $psqlSecret,
              "quayConfig": "Use Existing Repository",
              "quayOrgName": $quayOrg,
              "quayRepoName": "test",
              "system": "Guest"
            }
          }' > advanced_payload.json

        ADVANCED_TASK_ID=$(curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" -H "Authorization: Bearer $BACKEND_TOKEN" -H "Content-Type: application/json" --data-binary @advanced_payload.json | jq .id | tr -d '"')

        #ADVANCED_TASK_ID=$(curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" -H "Authorization: Bearer $BACKEND_TOKEN" -H "Content-Type: application/json" -d '{"templateRef":"template:default/advanced-workflow-bootstrap","values":{"owner":"user:guest","orgName":"$GITHUB_ORG","repoName":"jft","description":"This is a Test Repository","workflowId":"test","CI":"tekton_argocd","argocdNamespace":"argocd","infrastructureWorkflowId":"test","namespace":"sonataflow-operator-system","persistencePSQLDatabaseName":"sonataflow","persistencePSQLPasswordKey":"$PSQL_SECRET","persistencePSQLSecretName":"sonataflow-psql-postgresql","persistencePSQLServiceName":"orchestrator-postgresql","persistencePSQLServiceNamespace":"default","persistencePSQLServicePort":5432,"persistencePSQLUserKey":"$PSQL_SECRET","quayConfig":"Use Existing Repository","quayOrgName":"testing-eshalev","quayRepoName":"cray","system":"Guest"}}' | jq .id | tr -d '"')
        echo "ADVANCED_TASK_ID=$ADVANCED_TASK_ID" >> $GITHUB_ENV
    
    - name: Validate Advanced Template Successs
      run: | 
        sleep 20
        RESULT=$(curl -X GET "$BACKSTAGE_URL/api/scaffolder/v2/tasks/$ADVANCED_TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status | tr -d '"')
        echo $RESULT
        if [ "$RESULT" = "failed" ]; then 
          echo "The Basic template launched but failed to complete."
          exit 1
        fi

        if [ "$RESULT" = "completed" ]; then 
          echo "The Basic template was executed successfully."
        fi
        
        
    - name: Run Basic Template
      run: |
        jq -n \
            --arg org "$GITHUB_ORG" \
            --arg psqlSecret "$PSQL_SECRET" \
            --arg quayOrg "$QUAY_ORG" \
            '{
              "templateRef": "template:default/basic-workflow-bootstrap",
              "values": {
                "owner": "user:guest",
                "orgName": $org,
                "repoName": "basic-repo-test",
                "description": "This is a test repository for a workflow created by a template",
                "workflowId": "basic-repo-test",
                "CI": "tekton_argocd",
                "argocdNamespace": "argocd",
                "infrastructureWorkflowId": "basic-template-test",
                "namespace": "sonataflow-operator-system",
                "persistencePSQLDatabaseName": "sonataflow",
                "persistencePSQLPasswordKey": $psqlSecret,
                "persistencePSQLSecretName": "sonataflow-psql-postgresql",
                "persistencePSQLServiceName": "orchestrator-postgresql",
                "persistencePSQLServiceNamespace": "default",
                "persistencePSQLServicePort": 5432,
                "persistencePSQLUserKey": $psqlSecret,
                "workflowType": "infrastructure",
                "quayConfig": "Use Existing Repository",
                "quayOrgName": $quayOrg,
                "quayRepoName": "test",
                "system": "Guest"
              }
            }' > basic_payload.json
  
        BASIC_TASK_ID=$(curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" \
        -H "Authorization: Bearer $BACKEND_TOKEN" \
        -H "Content-Type: application/json" \
        --data-binary @basic_payload.json | jq .id | tr -d '"')
        # BASIC_TASK_ID=$(curl -X POST "$BACKSTAGE_URL/api/scaffolder/v2/tasks" -H "Authorization: Bearer $BACKEND_TOKEN" -H "Content-Type: application/json" -d '{"templateRef":"template:default/basic-workflow-bootstrap","values":{"owner":"user:guest","orgName":"$GITHUB_ORG","repoName":"jftt","description":"This is a Test Repository","workflowId":"test","CI":"tekton_argocd","argocdNamespace":"argocd","infrastructureWorkflowId":"test","namespace":"sonataflow-operator-system","persistencePSQLDatabaseName":"sonataflow","persistencePSQLPasswordKey":"$PSQL_SECRET","persistencePSQLSecretName":"sonataflow-psql-postgresql","persistencePSQLServiceName":"orchestrator-postgresql","persistencePSQLServiceNamespace":"default","persistencePSQLServicePort":5432,"persistencePSQLUserKey":"$PSQL_SECRET","workflowType":"infrastructure", "quayConfig":"Use Existing Repository","quayOrgName":"testing-eshalev","quayRepoName":"cray","system":"Guest"}}' | jq .id | tr -d '"')
        
        echo "BASIC_TASK_ID is $BASIC_TASK_ID"
        echo "BASIC_TASK_ID=$BASIC_TASK_ID" >> $GITHUB_ENV
    
    - name: Validate Basic Template Successs
      run: | 
        sleep 20
        RESULT=$(curl -X GET "$BACKSTAGE_URL/api/scaffolder/v2/tasks/$BASIC_TASK_ID" -H "Authorization: Bearer $BACKEND_TOKEN" | jq .status | tr -d '"')
        echo "NOW"
        echo $RESULT
        if [ "$RESULT" = "failed" ]; then 
          echo "The Basic template launched but failed to complete."
          exit 1
        fi

        if [ "$RESULT" = "completed" ]; then 
          echo "The Basic template was executed successfully."
        fi

    - name: Cleanup
      run: |
        echo "End to end tests passed ✅"

        curl -X DELETE https://api.github.com/repos/$GITHUB_ORG/basic-template-test           -H "Authorization: Bearer $GITHUB_TOKEN"
        curl -X DELETE https://api.github.com/repos/$GITHUB_ORG/basic-template-test-gitops    -H "Authorization: Bearer $GITHUB_TOKEN"
        curl -X DELETE https://api.github.com/repos/$GITHUB_ORG/basic-template-test           -H "Authorization: Bearer $GITHUB_TOKEN"
        curl -X DELETE https://api.github.com/repos/$GITHUB_ORG/advanced-template-test-gitops -H "Authorization: Bearer $GITHUB_TOKEN"

        # Delete RHDH resources created (catalog etc)
          



        