apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: basic-workflow-bootstrap
  title: Basic workflow bootstrap project
  description: Bootstrap project for basic serverless workflows
  tags:
    - orchestrator
    - built-in
  links:
    - url: https://openshift-knative.github.io/docs/docs/latest/serverless-logic/about.html
      title: About OpenShift Serverless Logic
      icon: techdocs
    - url: https://kiegroup.github.io/kogito-docs/serverlessworkflow/latest/index.html
      title: SonataFlow Guides
      icon: techdocs
spec:
  owner: janus-orchestrator
  type: basic-workflow-bootstrap

  parameters:
    - title: Provide information about the workflow software project
      description: Configure the github repository where the Maven software project is located 
      required:
        - orgName
        - repoName
        - workflowId
        - workflowType
        - owner
        - system
      properties:
        orgName:
          title: Organization Name
          type: string
          ui:autofocus: true
          description: Github organization Name
        repoName:
          title: Repository Name
          type: string
          description: Github repository name
        description:
          title: Description
          type: string
          description: Description added to the README file
        workflowId:
          title: Workflow ID
          type: string
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)([.][a-zA-Z0-9]+)*$'
          description: Unique identifier of the workflow in SonataFlow
        workflowType:
          title: Workflow Type
          type: string
          description: Metadata added to the workflow to distinguish assessment and infrastructure
          enum:
            - assessment
            - infrastructure
        owner:
          title: Owner
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
    - title: Provide information about the Maven software project
      required:
        - groupId
        - artifactId
        - version
      properties:
        groupId:
          title: Group ID
          type: string
          default: io.janus.workflow
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)([-._][a-zA-Z0-9]+)*$'
          description: Maven Group ID eg (io.janus.workflow)
          ui:autofocus: true
        artifactId:
          title: Artifact ID
          type: string
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)([-._][a-zA-Z0-9]+)*$'
          description: Maven Artifact ID
        version:
          title: Project version
          type: string
          default: 1.0.0-SNAPSHOT
          description: Maven version, also used to tag the generated artifacts
    - title: Provide information about the Deployment environment
      required:
        - clusterDomain
        - namespace
      properties:
        clusterDomain:
          title: Cluster domain
          type: string
          default: cluster-jkrpp.dynamic.redhatworkshops.io
          description: Cluster domain
        namespace:
          title: Namespace
          type: string
          default: sonataflow-infra
          description: Deployment namespace
  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code  and Catalog Info Component
      action: fetch:template
      input:
        # "Relative path is not allowed to refer to a directory outside its parent"
        url: ./skeleton/
        values:
          namespace: ${{ parameters.namespace }}
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          description: ${{ parameters.description }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          version: ${{ parameters.version }}
          workflowId: ${{ parameters.workflowId }}
          workflowType: ${{ parameters.workflowType }}
          sourceControl: github.com
          gitUrl: git@github.com:${{ parameters.orgName }}/${{ parameters.repoName }}.git
          gitConfigUrl: git@github.com:${{ parameters.orgName }}/${{ parameters.repoName }}-config.git
          applicationType: workflow-project
          lifecycle: development
        targetPath: workflow
    - id: renameFiles
      action: fs:rename
      name: Rename files
      input:
        files:
          - from: workflow/src/main/resources/schemas/input-schema.json
            to: workflow/src/main/resources/schemas/${{ parameters.artifactId }}-input-schema.json
            overwrite: true
          - from: workflow/src/main/resources/schemas/template__sub_schema__sample_section.json
            to: workflow/src/main/resources/schemas/${{ parameters.artifactId }}__sub_schema__sample_section.json
            overwrite: true
          - from: workflow/src/main/resources/${{ parameters.workflowType }}-template.sw.yaml
            to: workflow/src/main/resources/${{ parameters.artifactId }}.sw.yaml
            overwrite: false
    - id: deleteFiles
      action: fs:delete
      name: Delete files
      input:
        files:
          - workflow/src/main/resources/assessment-template.sw.yaml
          - workflow/src/main/resources/infrastructure-template.sw.yaml
    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}
        defaultBranch: main
        sourcePath: workflow
        # TODO: get from kubernetes pulgin settings
        secrets: {
          K8S_CLUSTER_URL: https://api.cluster-jkrpp.dynamic.redhatworkshops.io:6443
          K8S_SECRET: |
            apiVersion: v1
            data:
              ca.crt: 
              namespace: YmFja3N0YWdlLXN5c3RlbQ==
              service-ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lJTUZ4d1MyU21kK013RFFZSktvWklodmNOQVFFTEJRQXdOekVTTUJBR0ExVUUKQ3hNSmIzQmxibk5vYVdaME1TRXdId1lEVlFRREV4aHJkV0psTFdGd2FYTmxjblpsY2kxc1lpMXphV2R1WlhJdwpIaGNOTWpRd01qSTRNRGt3TXpBeFdoY05NelF3TWpJMU1Ea3dNekF4V2pBM01SSXdFQVlEVlFRTEV3bHZjR1Z1CmMyaHBablF4SVRBZkJnTlZCQU1UR0d0MVltVXRZWEJwYzJWeWRtVnlMV3hpTFhOcFoyNWxjakNDQVNJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSjlETHpPREcvaUZmT0E2N3FLWjV3TG1rQ0wxSzZSWApGaW5oZGNUMXdVVWZxNnNSc0diUGZ1R0FlRG1JWEJCNmFhblFrQTk0R0RHY2hUcDRDdG5rSzNZMVg3RzZtamFuCkhuYUZBUGJXU3p2bmpBRy9KQk02VVhkanBmTk0vL2RhR0pyMlBmV1dhS3c4bGM0bWE0YnpSV3g2R3YrZ1ZKSkEKVFM4cTFwRlVvS3NBUWY4Z1lXbnAvVUdMTUozRWt0V254SkRZdWJqb0dOKzRkTlR3NE1oNHU1UnZkbldld2VJcgp4WVdqRGlOcDJzUWkzdnRpeFlBc2tBWVdWVHgyZUErU3hOMThHN0cwejQxdlk3N3NTSkpFaG1OUHBDTkltaDkwCnYwTDJaUytOWTg0R1VvWGZXK3B4blhCejlKZGlvQ3ZMRUNxbnNlbzg5Sm12aUhUYktROENWdmNDQXdFQUFhTkMKTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkdXLwpOQjI0M0l3NVZnaTJHUnpRNEUvWVpqRFBNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJ2MXRyWWNBVzh4d0crCjFvSGZ5RmFuMWV5UldzUFBCRi9RZjErREtYdUVkcHBaOWtlU2tuUmdaVmQ4WnpKSjRNeVZ5QzdTelc1N3NmRzgKZjJNMko2TmxoSythTmg2Nm9KbFovbVpZRjdRTzZVYWRQZ0RIV2hrRVJ5RG1YRGtPeGdBY1dtK29aeUEyUzFHdQpRWW5xWFk1RzNDcTY2eUlWNHpSNkNnSkpOd3BsMHZrRW0vaWsrQXA4cVFhOW94RUg1cmI0eGl6VzBQd2ZXNWtYCnB2enE0QStUdzRaWmZrTGtEbHc5REdWUDJCRmRJaThndlZyWHRCL1FKN1AzOEQ2KzVjSWk2T1dZQkZUZEpnQnQKY3FpVktOcEdPZG9YRW05SUc0M2ZzdnQ4QTF4RUp3cjh6RUY0dklIS1Y0ZWo2aU51MzN3U3UzaE94NkNUdytBSQpqemx4SHpxdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEUURDQ0FpaWdBd0lCQWdJSURaOFIxZkRycjFZd0RRWUpLb1pJaHZjTkFRRUxCUUF3UGpFU01CQUdBMVVFCkN4TUpiM0JsYm5Ob2FXWjBNU2d3SmdZRFZRUURFeDlyZFdKbExXRndhWE5sY25abGNpMXNiMk5oYkdodmMzUXQKYzJsbmJtVnlNQjRYRFRJME1ESXlPREE1TURNd01Gb1hEVE0wTURJeU5UQTVNRE13TUZvd1BqRVNNQkFHQTFVRQpDeE1KYjNCbGJuTm9hV1owTVNnd0pnWURWUVFERXg5cmRXSmxMV0Z3YVhObGNuWmxjaTFzYjJOaGJHaHZjM1F0CmMybG5ibVZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF5Y09Ya1FoR1RrRGMKMnVFZXdIeDcrUHk3ZFNJWGJudlNnOXdEaEFqeCttNnRQa0tsVGppQkxtMmI2WjFuVVBGVXVDNEdBWDBNK0w2SAo1cnVkQm1GcnFRajQ2MEVRbDdhTVlnZE4zRTRFN3VxZWRLNGFPK0NibjdFSVR0bVR6WTczNkNpcHFLcDJzZThLCjNQVFdnWmx0TFFhWXdGbFd6RGloS09QMzY0cjBWWE1lZlB2ZTUzMjZ1SzE1RUZpQk0wNHIxMEJ1TTdvencxNGYKeFExaHZDajNpSVcrTDFka2tXZjJjcUNQbzc1Vy9ZcnI3a3g3b3NSd2FzdCs4YlQ4UEw4TTI5QWtNSmhPMWpGOQpHK2JUTnRDcXNLYmlUWFhPb21ZSDdIZ2x5VjV2MThLNy9LUEVWL3lWMDMyMEo2U0FwQlBiV3ZuWXJkU0Y4aWJOClM0d2lVL2hEZVFJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3RHdZRFZSMFRBUUgvQkFVd0F3RUIKL3pBZEJnTlZIUTRFRmdRVWhCSlpGbDZtS1NUU1BoYm1KNlFYRHF4a2s0OHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUoxd01zRFo3blFPUUx6ci9rRlhsN3dMNGFRSUwvOUV4dnpjS1AvZjlnNlBra1dkMHljQ0VkRDkzem5PCmtyZ3g3MmhUYXI5Zko3eERRYVRjRkRDeVZSOUZ3NzJ3YWI5TmtQNWR1a2NxNmkyVWxmMGlTNTJJYitKVHpUMGcKTDh1SDY4ZWF6KzFFZzhHa0F1THptWDYwY2xjREJadlNxaktTOFBOU1Q3QWRSbEtEUHdnRGdtZFNBNDZLYVZqLwo3K3BjWVpPWW5QWlFROTNER1BmWWRMQVpoK1lHOUZvV1RLY0dqb0xQdU93VXBuL3NPR1d1UyszVk0rZ3l0ZmgvCmhEcG1wMXYrU1RpMnAwem1oMVhqMEdoL3hYT1hGL2VMWlhlNkhSWFpCRk8ycm5ySmVxUFpXeUxwNkM0R0xLMWQKNlNBQUwrYk12TS9OTjg2c1E5cXhiS2JWSEtFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlEU3pDQ0FqT2dBd0lCQWdJSEtzTXV3WS9udXpBTkJna3Foa2lHOXcwQkFRc0ZBREJFTVJJd0VBWURWUVFMCkV3bHZjR1Z1YzJocFpuUXhMakFzQmdOVkJBTVRKV3QxWW1VdFlYQnBjMlZ5ZG1WeUxYTmxjblpwWTJVdGJtVjAKZDI5eWF5MXphV2R1WlhJd0hoY05NalF3TWpJNE1Ea3dNekF3V2hjTk16UXdNakkxTURrd016QXdXakJFTVJJdwpFQVlEVlFRTEV3bHZjR1Z1YzJocFpuUXhMakFzQmdOVkJBTVRKV3QxWW1VdFlYQnBjMlZ5ZG1WeUxYTmxjblpwClkyVXRibVYwZDI5eWF5MXphV2R1WlhJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEU1JCV21kN3NvVmlzdGh5a0ZXR0ZKRkMzMHkwVGNydjZ2SDh6Y0xMSWQ4d3B5K0FDRCtrTG9YbUphYmtKNwpmOUFyRTBHcE5jVExLdUdQakFvSzNrcFdjcnZiTkdSOFZIdVJaWURVc2FHMkxtckN0LzV3YVpBYkk0eVJLZDNCCkNQcEFMNzFoUjhyUGIwNTFoaUxZZDhrYkRlNU15amY3N3BSVDFxNUdwMkdYRk5wRUpqeGU4cE5IN3FZdURLTE8KVFJmY2d2Rm4vMFB0SWp5clV1REQ3SHZ2VmVCcW40dFN6SXRCekRzT0l5N00vbk15QzAvWHVuQXo2V2Y3ZEFyTQp2T0xMdUlNY2hTU2tPVGQ3UTZWMkkxK0hiVHk0Z05WdFdheDdESjM3RUM1Rjg0dkQ0VStQekY5UHVkdDJBcFRYCkZ3NHAwNjJ2WE5WUG5GY2phZE9tMjN6ZkFnTUJBQUdqUWpCQU1BNEdBMVVkRHdFQi93UUVBd0lDcERBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUzZ4b2krQ0xpVk1xSXlSdFlzbTdZa050S0dzakFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQWhOSlhqUldJRjVVUEN1YXJKWUEzSW12bld0SzZES3UvOTB2dHNiU0RmVHFICnp3VlVYbjc3T1V1WGpZcjVhZXZoU3czd0E3eUhmemJiOVhvd1NibWZ2YU1RTjhOVklQY0gwekRQeFE2c21KMVYKUGl5Y0ZFR2R0L1dMS0hiRzNLL3lRYlIrZkI0T3lISWhTdmxyV1RvdGFCOHUwYmhnSzZETFF6TVhsWWthT1pragpVRHVNQnB1cTZlUzFrOWFwZmc4WGFWdWxBWWRhRUsyZEU5V1BqemJzdmZ5QkJkSzZKem9YUzl5RnBjZUtoeVVsCitRWXd2YW9CMlVma24xNGY1OGkvTGNsbE5VLzBsNEs5NHVSQ0psc2F3d1lnVVN2Q3JSUnZLakx6RHpDWExHUWUKVlUrazZIYkpNOCtZWEFDNVlLdFBmajFuQ0lKUnl1SVBQNC9JeklmelFRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQotLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJRGx6Q0NBbitnQXdJQkFnSUljMWp2U083aVRiOHdEUVlKS29aSWh2Y05BUUVMQlFBd1dURlhNRlVHQTFVRQpBd3hPYjNCbGJuTm9hV1owTFd0MVltVXRZWEJwYzJWeWRtVnlMVzl3WlhKaGRHOXlYMnh2WTJGc2FHOXpkQzF5ClpXTnZkbVZ5ZVMxelpYSjJhVzVuTFhOcFoyNWxja0F4TnpBNU1URXlORGcxTUI0WERUSTBNREl5T0RBNU1qZ3cKTlZvWERUTTBNREl5TlRBNU1qZ3dObG93V1RGWE1GVUdBMVVFQXd4T2IzQmxibk5vYVdaMExXdDFZbVV0WVhCcApjMlZ5ZG1WeUxXOXdaWEpoZEc5eVgyeHZZMkZzYUc5emRDMXlaV052ZG1WeWVTMXpaWEoyYVc1bkxYTnBaMjVsCmNrQXhOekE1TVRFeU5EZzFNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXRrVGUKa3pqaFhiclYrWVVpMVE0M1lBbHZ4T2pnOGRLQTQzckF3ZDlXN0RvU002U1RYUThVMFQ1bytLcEdoYndzUjNpQgo2clp6bkRlbkg0WEF6ODkxdGd6SHVUc2xxZG9TRUt1TVdpODFEQjAxNERiZUticGszZ0xQaXkxdTdqQ2RBblNmCnRtZWJoeGp3czZEaDhiS1JMNE1nWGRzbVNLRTNaWEljYU1BTmJmMlJXOEEySDNzK09XdU5iSFhEbUhXS1BURm4KRDI1TG5FSWpFU1hEaGhKN2NCRldUNERPaHg4bFhXT3Z6U2FGbzlldUdmd2V0SGtmQW9oKzlraTNBOHJCaGRXSQpHL0FoVFFEVXphU3h5Z3A0QmZDVnJpRytzbWNsOW1mYVBNNDRkNkpXTmUrbEJLdENxRit3M3NyQXBqRFpnZTZiClltUkdjVno5cEpDQTM3SXJyUUlEQVFBQm8yTXdZVEFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEVlIwVEFRSC8KQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVcUdWSzdjTDUybjg3VGZMWG5OdXpCRmx4LzZzd0h3WURWUjBqQkJndwpGb0FVcUdWSzdjTDUybjg3VGZMWG5OdXpCRmx4LzZzd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFRFRxSGhFCk9FU1FsSUtMcW92K0sxOGo5L0tQZ2ZSTVRJOFdZbThidEtZeTZmYWdBRUFWenMvV0VueW1mWjcxZTN6Yk9jblIKdmRNb21BRDhQeWFvcm1KZGpuTk02b0xCM2gyK1FkRVc0WmNXc1YzVVlDVEd0cU4rUzF2OTdya2ZPTUNKNFpYWgpDUWJRZkRhbWw4cURnWE1Rbk94ekh5ZHM2clQyNDFzYzUwUFpBNXpIK2tXbWJPVEVVUlZuTDV1L3U2dzNxSW9tCkdVN0YxaVMvNzdPZEhlT0gwcWRkSGVyaVA5NWR6dkUvYWp0MGxmclNVYXNZVk5oTlhCd211UWlFVTdObnZSV1gKc2UxQmtZckVuaGV4L2tsZjNwWkI3YWkvZU5KcWpCbEYrcXMyUFR0TGdna0FXRTFsN3YzcGdWRHN1V1BhYVpERwoyR0ZTZWtMMTBUU0hxbjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZWakNDQkQ2Z0F3SUJBZ0lTQkF4cFFaMUg4T1JEVWxkT2RUSW5VR3pMTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlOREF5TWpnd09EVTJOVEJhRncweU5EQTFNamd3T0RVMk5EbGFNRGN4TlRBekJnTlZCQU1UCkxHRndhUzVqYkhWemRHVnlMV3ByY25Cd0xtUjVibUZ0YVdNdWNtVmthR0YwZDI5eWEzTm9iM0J6TG1sdk1JSUIKSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXFublJxamlGcm9OS2xsU2JYWi83em5qagpQRlB5dVZmSmF5WEdCTE4zeDNUOFIwWGMvNmdydHBtSUlCb3E5M0tsNnhkOUJhR2YxYndFT3hydzVORFlXOHM0ClJWL0FPNGhuWGpFQXlTRGUyZXVKcUN4YUtKWUJkQkdtd2RNWDZRTzhDZWtoOFE4cmI4Tit3RXhVZWNlZ1RGU0YKT0JHdEtsSXd1emhHcnk5dVU1WHh3N2lHcTVWdThyNG5HSE0yQ0xvdmVxNFNqQmVYajVGMlNFelZCQXpPYWRqRgoycmxHUDErWUtSYnZySTRpV3RHdVdxcyt5UkRrZWNRMVIvQ2xFRDBnUmRpcWNlUEJxeWtSbG91QllrTXM1SVp3CnUzVW1Bd2hORU9VTHlrR1ovV2VCdGg2SkI3ZHZNT09kdVJkU3JRWVN1Ri9jWFo1WjdZN3YvcDVmanEveTJ3SUQKQVFBQm80SUNYekNDQWxzd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQgpCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCVDN3NjBtS0hDRHBrUnUyZFlECmVEMHBVSWRFaFRBZkJnTlZIU01FR0RBV2dCUVVMck1YdDFoV3k2NVFDVURtSDYrZGl4VEN4akJWQmdnckJnRUYKQlFjQkFRUkpNRWN3SVFZSUt3WUJCUVVITUFHR0ZXaDBkSEE2THk5eU15NXZMbXhsYm1OeUxtOXlaekFpQmdncgpCZ0VGQlFjd0FvWVdhSFIwY0RvdkwzSXpMbWt1YkdWdVkzSXViM0puTHpCb0JnTlZIUkVFWVRCZmdpOHFMbUZ3CmNITXVZMngxYzNSbGNpMXFhM0p3Y0M1a2VXNWhiV2xqTG5KbFpHaGhkSGR2Y210emFHOXdjeTVwYjRJc1lYQnAKTG1Oc2RYTjBaWEl0YW10eWNIQXVaSGx1WVcxcFl5NXlaV1JvWVhSM2IzSnJjMmh2Y0hNdWFXOHdFd1lEVlIwZwpCQXd3Q2pBSUJnWm5nUXdCQWdFd2dnRUVCZ29yQmdFRUFkWjVBZ1FDQklIMUJJSHlBUEFBZHdBN1UzZDFQaTI1CmdFNkxNRnNHL2tBN1o5aFB3L1RIdlFBTkxYSnY0ZnJVRndBQUFZM3ZKVHB2QUFBRUF3QklNRVlDSVFEVzFNTlkKN0F0OWs0RVAzYXRSRWdqVEJ4SE5xRWdXSEdsK251Q1Rhc3pRZmdJaEFNdWw1ZlZZU2xjck5vTTE2QTNpQ0hCbQpxRWNDN0o1RnNZYVBxaU9kcjJubEFIVUE3czNRWk5YYkdzN0ZYTGVkdE0wVG9qS0hSbnk4N043RFVVaFpSbkVmCnRac0FBQUdON3lVNmZRQUFCQU1BUmpCRUFpQWtySDB6M1RuL21vRTNjNHZpQjRrZ2FuU25FKzdtMldEbHU3clUKUURtWUFRSWdLd1hoYUVIZHN0MTdWY1BsTDdDNFBxWEhKOHp6RnRaL0VUenR6VU9sTnFVd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBSGZ1cE1Yc2phQjF4Rkt6MzY0YysxUjNVS25KL2Vqdm9KTDF5Y0tueUVrak5TVlAyNG5nCnNaUEpjOW5jbURyYWdoNmNSUmpWNHpFYVJJTlhZZEdBYUZqSzlXYVRVbDhUemJRbTVBUzBBdWxLTGV5bXpyblkKdGZSNE02Z1pERlh0SC9tWEoyT0xYb0w2RFhkdXVycWhGVUVFNGlBUE9WcENpd1ozSjNoQ0pnUDJ2ZURsaldmQgprMkJnTlBQQ0hCdFdoQ2oySkFabURXbG9VWmo0NjRDSmRjYTNvUXQ3YzFMODlKV0hsUzhJK2ZSaUZwNXNIaTVZCjl6M2NKMTNDZlNpT1c3MHJ0S2J6UnhNczJkOWZPWGZZNXFEa2NiRlFvZDVMUXFibDJCU2tobzZGUnZnUHl2TVgKMHhqaWZjQ3Z6cXI3RHZTdDRBcVUveU5WOWsrSkxQV0taTFU9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoKLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVVENDQWptZ0F3SUJBZ0lJZHhSWTEvKzNGK2N3RFFZSktvWklodmNOQVFFTEJRQXdOakUwTURJR0ExVUUKQXd3cmIzQmxibk5vYVdaMExYTmxjblpwWTJVdGMyVnlkbWx1WnkxemFXZHVaWEpBTVRjd09URXhNalEwTURBZQpGdzB5TkRBeU1qZ3dPVEkzTVRsYUZ3MHlOakEwTWpnd09USTNNakJhTURZeE5EQXlCZ05WQkFNTUsyOXdaVzV6CmFHbG1kQzF6WlhKMmFXTmxMWE5sY25acGJtY3RjMmxuYm1WeVFERTNNRGt4TVRJME5EQXdnZ0VpTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3JHcUpma25uUWR5Zlg1eXRWNy8rZldTK1NHeXRrdDIvTgp4ZXF6NVhGTkRRRWZaU2Vtc2VIaVRVRG0wRkpzdnM2bk9zaGJDRXk4U29ZQnBIT2lwQTFQbmM0Vkl2MjhydklmClM0T2VzdFdnMzhsQWZDYm5nM1RQeisyT0grbGVSSkJKM0RBV2Q1UFRIeFVEeHdMb1V2V1BhY3dqZEMrV01BTU4KRzBtQzZKeVI3MURCV3R4TTFDTWdjemlUck5pbG9CeFNuOHFoN1hEaFFZQ3pRdGIveHFZb3hFR1d5dVIwVlVoUQo5cTM1UG9YOGM3a1pnVHdMRmdKdGlVbEE5bWZCUTFPOUJ4K0grT0NqeDJCN1dwREJ3YnlNY001YkMxM0N3R050CmM3dGhUL1lvU2xmZEJLcGVKdTlBT0t6OFhkVXJ0NFZTWUpieHM2THljWmk4cHJIdnFKNFZBZ01CQUFHall6QmgKTUE0R0ExVWREd0VCL3dRRUF3SUNwREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlQ4QU42VQpmM05DeTlUVC9QcUtNNkNMUnZoa3RUQWZCZ05WSFNNRUdEQVdnQlQ4QU42VWYzTkN5OVRUL1BxS002Q0xSdmhrCnRUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFmTVdlZVVLMUVremtvdU1YOGZSbk1KZGxRbnRURWJhTDcrWWQKdmh5QjBnU2NTcXVpWTlxWkkxdU9HaExzRU5nZFNNWngwWCtKOW9NK1NNNFdOOS91MlU2QUdIalhEWVZ1MkE0Ygo3UEpKYnlNQzVUNERXMnRiV2M3R2tCMWVDNnhETWVmZ3daNTVMT09vdU1EV3lQaWk4THhkdnVpRlRMSTZGM3lBCkhzUTYyc0lDa01FOFVoUjAzRHVBMnBMTmgxMmhiaTBGNWlqd1JZbmNMNWY3N1VJUE5OWE9BNnQvb2MwY1pZNSsKZzJBVVQ3QTVwWW05OXZzOXJpSzZUL282eWxtMFZuWloyQ3JwOVZpYS84MFhJeTlmK1RUVXJtL2R2UmtzTS9XRgpDc0oycm5ROWFndCt1cVNqRDByWW41OVgwVjlFTFdRYzFKL3lUd1h1SWtrL3lrOGI4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
              token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrUm5iREF3ZFRaMlVXeExTVU42Tm1oaFJYUnBYM0JZZUcxNGNUQTBhR0ZyVkVaZk1tVkpkbVZzZVRBaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUppWVdOcmMzUmhaMlV0YzNsemRHVnRJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbUpoWTJ0emRHRm5aUzFyT0hNdGRHOXJaVzR0Tkd3MWVIWWlMQ0pyZFdKbGNtNWxkR1Z6TG1sdkwzTmxjblpwWTJWaFkyTnZkVzUwTDNObGNuWnBZMlV0WVdOamIzVnVkQzV1WVcxbElqb2lZbUZqYTNOMFlXZGxMV3M0Y3lJc0ltdDFZbVZ5Ym1WMFpYTXVhVzh2YzJWeWRtbGpaV0ZqWTI5MWJuUXZjMlZ5ZG1salpTMWhZMk52ZFc1MExuVnBaQ0k2SWpnelltRTNaRGN4TFRaaFlXWXROR1l4T0MxaFlUY3lMVFkzTm1Oa05HRmpOamt5WmlJc0luTjFZaUk2SW5ONWMzUmxiVHB6WlhKMmFXTmxZV05qYjNWdWREcGlZV05yYzNSaFoyVXRjM2x6ZEdWdE9tSmhZMnR6ZEdGblpTMXJPSE1pZlEuVHV1VkxVbEhTRWdMYW5UbVF1ZWtfeEpjNGtEOVlJX0hFb2hlRmNQdVRoak81ZlJ1WEJ1TWR6YTc0OVNXYjNYajU0T3ktb3JOUVRDdFJqYllDSEhyWDBLdEZDdDc4LVpIWEM5TjRPWXNOZXlMY3FlbEpHay1DYTlQQ25KZDhIQVV3RjJsSWhJVGtkdS1uRWlaeEl5S2lNTnNMV0Rta2Q1Ty1DYTljZThHa1lEMHQ5SVVUcGFJLTJoYUlYaEFJNHpNcExHVmdqNjh0VXNmT3ZuMExkMXZ5UFQ0ekV0aDZQYW1EV0w5OWN0cHJkZ1JEa3hKeGQ2d0hQWlk2TXlnTWN2a1prUl96UElIYWl6XzRlSlFXdW5mREJpZ1RiZUNURHFRLXgtWHpzc0hwLXdqaXJnODlxU0lDMlIzYmx6aGtBNjd3OWZIT09obTJ5T3FVTlNBeTVuY1VFOGRWMWVsVnhBZ0kyeFN1YjFFcy1RZzlfRnBWTEhpeVBZNUhSdjRTenQteGZrRWpJUWEyNXR6UXFmWTY3UjV1M0dlS3N3a1Jnckx6RjJhb0t2QU5KSXNLRUpTVGg4djJhd29RSXA0LW56Qy1ZZ1lHWWpqb3V5eVNqdTBvX0VfSDU2R0x4YVd3MXdrZkNtYi1EQm5VRGJiNU1tblhoNmxWWUVSaVVKVmFTTjVPZHFqWGhaaXpxRmd5S0xhMEt1Wk9pUkpQbUpObGhkUEdRR0Rub2dwZmJZUGZweS1WX3pUeGRQSHoycmtYQ0dxMmZXTVFBYzhmMS1LUUtJY2dxYUF2Si1zRXYwcHN5M1U3aklVa3EwSGh3S2JpLVloZVFZd1NOMG8telBJUEFVVE9jaG8wNlE2THBsMTdGUkR4MFgtdWl5TUtUMFZGdDhYWndrR3BBLU9oV2c=
            kind: Secret
            metadata:
              annotations:
                kubernetes.io/created-by: openshift.io/create-dockercfg-secrets
                kubernetes.io/service-account.name: backstage-k8s
                kubernetes.io/service-account.uid: 83ba7d71-6aaf-4f18-aa72-676cd4ac692f
              labels:
                kubernetes.io/legacy-token-last-used: "2024-02-29"
              name: backstage-k8s-token-4l5xv
              namespace: backstage-system
            type: kubernetes.io/service-account-token
        }
    - id: create-webhook
      name: Create webhook to trigger the pipeline
      action: github:webhook
      # https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend-module-github/src/actions/githubWebhook.ts
      # Note: `Resource not accessible by personal access token`
      # See https://docs.github.com/en/rest/repos/webhooks?apiVersion=2022-11-28#create-a-repository-webhook
      input:
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}
        webhookUrl: https://webhook-${{ parameters.workflowId }}-el-${{ parameters.namespace }}.apps.${{ parameters.clusterDomain }}/
        contentType: json
    - id: deployTrigger
      name: Deploy pipeline triggers
      action: github:actions:dispatch
      input:
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}
        workflowId: deploy.yaml
        branchOrTagName: main
    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
    - id: configCodeTemplate
      name: Generating the Config Code Component and Catalog Info Component
      action: fetch:template
      input:
        url: https://github.com/parodos-dev/workflow-kustomize-template.git
        values:
          workflowId: ${{ parameters.workflowId }}
          namespace: ${{ parameters.namespace }}
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}-config
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: workflow-project
          description: ${{ parameters.description }}
          sourceControl: github.com
          lifecycle: development
        targetPath: config
    - id: publishConfig
      name: Publishing to the Config Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Configuration repository for ${{ parameters.orgName }}/${{ parameters.repoName }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}-config
        defaultBranch: main
        sourcePath: config
    - id: registerConfig
      name: Registering the Config Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publishConfig.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

