# Requirement: add a K8S_SECRET secret to your organization with the SA token
# Bind the SA with a cluster-admin Role
# oc get secret backstage-k8s-token-4l5xv -n backstage-system -oyaml > secret.yaml
# gh secret --repo parodos-dev/test-swf set K8S_SECRET <secret.yaml 
name: Deploy the Pipeline trigger manifests workflow

on:
  workflow_dispatch:
    inputs:
      tektonNamespace:
        description: 'Namespace of Tekton resources'
        required: true
        type: string
        default: 'sonataflow-infra'
      argocdNamespace:
        description: 'Namespace of ArgoCD resources'
        required: true
        type: string
        default: 'argocd'
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: service-account
          k8s-url: ${{ secrets.K8S_CLUSTER_URL }}
          k8s-secret: ${{ secrets.K8S_SECRET }}
      - name: Deploy Tekton trigger to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: ${{ inputs.tektonNamespace }}
          manifests: |
            tekton/eventlistener.yaml
            tekton/trigger.yaml
            tekton/route.yaml
      - name: Deploy ArgoCD application to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: ${{ inputs.argocdNamespace }}
          manifests: |
            argocd/application.yaml
      
      # To be reviewed: needs a private repo to skip the need of a PR 
      # - name: Commit a change to trigger the webhook
      #   run: |
      #     echo $(date) > tekton/trigger
      #     git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      #     git config --global user.name "${{ github.actor }}"
      #     git add tekton/trigger
      #     git commit --no-verify -m "Webhook trigger"
      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.ref }}
    