id: "${{ values.workflowId }}PreCheck"
version: '${{ values.version}}'
specVersion: '0.8'
name: "${{ values.workflowId }}PreCheck"
description: "${{ values.description }} pre-check"
start: ExtractWorkflows
functions:
  - name: logOuput
    type: custom
    operation: "sysout:ERROR"
  - name: extract
    type: expression
    operation: ".result | flatten | map(.id)"
  - name: checkProcessDefinitionExistence
    operation: "specs/${{ values.artifactId }}-dataindex.yaml#reactiveGraphQLHandlerPost"
  - name: removeMissingWorkflowsFromOptions
    type: expression
    operation: '.missingWorkflows as $f | .result | walk( if type == "object" then select(all($f[] != .id; .)) else . end )'
states:
  - name: ExtractWorkflows
    type: operation
    actions:
      - name: ExtractWorkflowsAction
        functionRef:
          refName: extract
        actionDataFilter:
          toStateData: ".infrasWorkflows"
    transition: QueryWorkflow
  - name: QueryWorkflow
    type: foreach
    inputCollection: "${ .infrasWorkflows }"
    outputCollection: "${ .fetchResults }"
    iterationParam: infrasWorkflow
    actions:
    - name: checkAction
      functionRef:
        refName: checkProcessDefinitionExistence
        arguments:
          query: "query CheckProcessDefQuery($id: String) { ProcessDefinitions  ( where: {id: { equal: $id} } ) { id } }"
          variables: 
            id: "${ .infrasWorkflow }"
          operationName: "CheckProcessDefQuery"
      actionDataFilter:
        results: "${ .data.ProcessDefinitions[0].id }"
    transition: Check
  - name: Check
    type: switch
    dataConditions:
      - condition: (.infrasWorkflows-.fetchResults | length > 0)
        transition: PrintError
    defaultCondition:
      transition: HandleNoError
  - name: PrintError
    type: operation
    actions:
    - name: error
      functionRef:
        refName: logOuput
        arguments:
          message: "\"workflows: \\(.infrasWorkflows-.fetchResults) are not found\""
    stateDataFilter:
      output: ". += { missingWorkflows: (.infrasWorkflows - .fetchResults) } | del(.infrasWorkflows, .fetchResults)"
    transition: HandleError
  - name: HandleError
    type: operation
    actions:
    - name: error
      functionRef:
        refName: removeMissingWorkflowsFromOptions
      actionDataFilter:
        toStateData: "${ .validatedResult }"
    stateDataFilter:
      output: ".originalResult = .result | del(.result)"
    end: true
  - name: HandleNoError
    type: operation
    actions: []
    stateDataFilter:
      output: ".validatedResult = .result | del(.infrasWorkflows, .fetchResults)"
    end: true
